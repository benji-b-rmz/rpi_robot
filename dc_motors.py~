#!/usr/bin/python
#Benjamin Ramirez 08/02/2016
#Creating a class to handle the pwm signals for 2 DC motors
#utilizing some functions from adafruit site for the motor hat:
#https://learn.adafruit.com/adafruit-dc-and-stepper-motor-hat-for-raspberry-pi/using-dc-motors
#used portions from Tony DiCola's Robot.py file inside /examples/

from Adafruit_MotorHAT import Adafruit_MotorHAT, Adafruit_DCMotor

import time
import atexit

 # create a default object, no changes to I2C address or frequency
mh = Adafruit_MotorHAT(addr=0x60)
def turnOffMotors():
	mh.getMotor(1).run(Adafruit_MotorHAT.RELEASE)
	mh.getMotor(2).run(Adafruit_MotorHAT.RELEASE)
	mh.getMotor(3).run(Adafruit_MotorHAT.RELEASE)
	mh.getMotor(4).run(Adafruit_MotorHAT.RELEASE)

#for disabling the motors at shutdown, we call the TurnOffMotors function
atexit.register(turnOffMotors)
# now that we have the motor hat class "mh", create functions to control the the individual motors
# all we need to do is control the voltage and the direction

myMotor = mh.getMotor(1)

class DC_MOTORS(object):
	def __init__(self, addr=0x60, left_id=1, right_id=2, stop_at_exit=True):
		"""creating an object to control 2 dc motors, 
		-addr: The I2C address of the motor HAT
		- left_id: the ID of the left motor, (1)
		- right_id: the ID of the right motor, (2)
		-stop_at_exit: flag used to indicate that motors should stop when the program exits(
		(want to prevent a crash ofc)
		"""
		#initializing the motors
		self._mh = Adafruit_MotorHAT(addr)
		self._left = self._mh.getMotor(left_id)
		self._right = self._mh.getMotor(right_id)
		#init motors to off
		self._left.run(Adafruit_MotorHAT.RELEASE)
		self._right.run(Adafruit_MotorHAT.RELEASE)
		#setting the atexit function for when the program exits
		if stop_at_exit:
			atexit.register(self.stop)

# recommended for auto-disabling motors on shutdown!

	def _left_speed(self, speed):
		#change the speed of the motor
		assert 0 <= speed <=255
		speed = max(0, min(255, speed))
		self._left.setSpeed(speed)

	def _right_speed(self, speed):
		#change the speed of the motor
		assert 0 <= speed <=255
		speed = max(0, min(255, speed))
		self._right.setSpeed(speed)
